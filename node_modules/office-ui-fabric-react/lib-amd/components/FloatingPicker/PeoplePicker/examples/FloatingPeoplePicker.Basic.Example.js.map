{"version":3,"file":"FloatingPeoplePicker.Basic.Example.js","sourceRoot":"../src/","sources":["components/FloatingPicker/PeoplePicker/examples/FloatingPeoplePicker.Basic.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\n\r\nimport { IPersonaProps } from 'office-ui-fabric-react/lib/Persona';\r\nimport {\r\n  IBaseFloatingPicker,\r\n  IBaseFloatingPickerSuggestionProps,\r\n  FloatingPeoplePicker,\r\n  SuggestionsStore\r\n} from 'office-ui-fabric-react/lib/FloatingPicker';\r\nimport { SearchBox } from 'office-ui-fabric-react/lib/SearchBox';\r\n// Fake data for examples. Not exported by any package.\r\nimport { people } from '../../../ExtendedPicker/examples/PeopleExampleData';\r\n\r\nexport interface IPeoplePickerExampleState {\r\n  peopleList: IPersonaProps[];\r\n  searchValue: string;\r\n}\r\n\r\nexport class FloatingPeoplePickerTypesExample extends React.Component<{}, IPeoplePickerExampleState> {\r\n  private _picker = React.createRef<IBaseFloatingPicker>();\r\n  private _inputElement: HTMLInputElement;\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      peopleList: people,\r\n      searchValue: ''\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const suggestionProps: IBaseFloatingPickerSuggestionProps = {\r\n      footerItemsProps: [\r\n        {\r\n          renderItem: () => {\r\n            const picker = this._picker.current;\r\n            return <div>Showing {picker ? picker.suggestions.length : 0} results</div>;\r\n          },\r\n          shouldShow: () => {\r\n            const picker = this._picker.current;\r\n            return !!picker && picker.suggestions.length > 0;\r\n          }\r\n        }\r\n      ]\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div style={{ width: 208 }} ref={this._setInputElementRef}>\r\n          <SearchBox\r\n            placeholder=\"Search for person\"\r\n            onChange={this._onSearchChange}\r\n            value={this.state.searchValue}\r\n            onFocus={this._onFocus}\r\n          />\r\n        </div>\r\n        <FloatingPeoplePicker\r\n          suggestionsStore={new SuggestionsStore<IPersonaProps>()}\r\n          onResolveSuggestions={this._onFilterChanged}\r\n          getTextFromItem={this._getTextFromItem}\r\n          pickerSuggestionsProps={suggestionProps}\r\n          key=\"normal\"\r\n          onRemoveSuggestion={this._onRemoveSuggestion}\r\n          onValidateInput={this._validateInput}\r\n          componentRef={this._picker}\r\n          onChange={this._onPickerChange}\r\n          inputElement={this._inputElement}\r\n          resolveDelay={300}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onFocus = (): void => {\r\n    if (this._picker.current) {\r\n      this._picker.current.showPicker();\r\n    }\r\n  };\r\n\r\n  private _setInputElementRef = (ref: HTMLDivElement | null) => {\r\n    const inputElements = ref && ref.getElementsByClassName('ms-SearchBox-field');\r\n    if (inputElements && inputElements.length > 0) {\r\n      this._inputElement = inputElements[0] as HTMLInputElement;\r\n    }\r\n  };\r\n\r\n  private _onSearchChange = (newValue: string): void => {\r\n    if (newValue !== this.state.searchValue && this._picker.current) {\r\n      this.setState({ searchValue: newValue });\r\n      this._picker.current.onQueryStringChanged(newValue);\r\n    }\r\n  };\r\n\r\n  private _onPickerChange = (selectedSuggestion: IPersonaProps): void => {\r\n    this.setState({ searchValue: selectedSuggestion.text || '' });\r\n    if (this._picker.current) {\r\n      this._picker.current.hidePicker();\r\n    }\r\n  };\r\n\r\n  private _onRemoveSuggestion = (item: IPersonaProps): void => {\r\n    const { peopleList } = this.state;\r\n    const itemIndex = peopleList.indexOf(item);\r\n\r\n    if (itemIndex >= 0) {\r\n      this.setState({\r\n        peopleList: peopleList.slice(0, itemIndex).concat(peopleList.slice(itemIndex + 1))\r\n      });\r\n    }\r\n  };\r\n\r\n  private _onFilterChanged = (filterText: string, currentPersonas?: IPersonaProps[]): IPersonaProps[] => {\r\n    if (filterText) {\r\n      // Filter by items starting with the current filter text, then remove duplicates\r\n      return this.state.peopleList\r\n        .filter((item: IPersonaProps) => _startsWith(item.text || '', filterText))\r\n        .filter((persona: IPersonaProps) => !this._listContainsPersona(persona, currentPersonas));\r\n    }\r\n    return [];\r\n  };\r\n\r\n  private _getTextFromItem = (persona: IPersonaProps): string => {\r\n    return persona.text || '';\r\n  };\r\n\r\n  private _listContainsPersona(persona: IPersonaProps, personas?: IPersonaProps[]): boolean {\r\n    return !!personas && personas.some((item: IPersonaProps) => item.text === persona.text);\r\n  }\r\n\r\n  private _validateInput = (input: string): boolean => {\r\n    return input.indexOf('@') !== -1;\r\n  };\r\n}\r\n\r\nfunction _startsWith(text: string, filterText: string): boolean {\r\n  return text.toLowerCase().indexOf(filterText.toLowerCase()) === 0;\r\n}\r\n"]}